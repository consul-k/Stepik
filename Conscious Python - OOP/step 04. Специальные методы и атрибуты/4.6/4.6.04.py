'''

    Часть кода уже написана. Вам нужно лишь объявить два метода: __iter__ , __next__
    Метод __iter__ выполняет две задачи:
    - Выводит на экран текст: "Запустился __iter__".
    - Возвращает self, чтобы код правильно работал.
    Метод __next__ выполняет две задачи (обе задачи выполняются внутри метода):
    - Имеет стандартный код с условием (if, else), чтобы экземпляры можно было использовать в циклах. 
    Подсказка, смотрите первый пример в статье про __iter__ , __next__. Итерации будут происходить по атрибуту data,
    поэтому создайте соответствующие проверки и исключение raise StopIteration.
    - Выводит на экран текст: "Запустился __next__". В методе не нужно использовать return, только print.
    В результате всего кода, мы получим на экране 4 сообщения (см. ответы ниже). Объявите только методы, всё остальное появится в результате цикла.

Sample Input:

Sample Output:

Запустился __iter__
Запустился __next__
Запустился __next__
Запустился __next__

'''

class MyList:
    def __init__(self):
        self.data = [1, 2, 3]
        self.index = 0

    def __iter__(self):
        print('Запустился __iter__')
        return self

    def __next__(self):
        if self.index >= len(self.data):
            raise StopIteration
        else:
            self.index += 1
            print('Запустился __next__')

# код ниже пожалуйста не меняйте
my_list = MyList()
for i in my_list:
    pass
