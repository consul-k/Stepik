'''

Вася снова экспериментирует с программами GPS навигации. В этот раз он создаёт простенькую программу, которая показывает расстояние между населёнными пунктами. В программе вы указываете "отсюда" и "сюда", а программа считает расстояние между городами.
Задание:

    Часть кода уже есть, заполните оставшуюся часть по заданию.
    Создайте метод count_distance с аргументами (self, point1, point2). Метод принимает названия городов (point1, point2), и вычисляет расстояние между ними. Если такого города среди атрибутов нет, выводит сообщение:
    Извините, программа ещё в разработке.
    Для подсчётов сделайте в методе count_distance вот что:
    - С помощь цикла for пройдитесь по списку с атрибутами [self.distance1, self.distance2, self.distance3].
    - Если point1 == point2, выведите на экран число 0. Затем завершите цикл с помощью break.
    - Если point1 и point2 находятся в атрибуте, то выведите на экран расстояние, указанное в этом атрибуте. Например, в атрибуте distance1 расстояние это - 1860. Затем завершите цикл с помощью break.

    - Если ни одно условие в цикле не выполнится, нужно вывести на экран сообщение: "Извините, программа ещё в разработке". Для этого используйте else. Напомню, else в цикле выполняется всегда в конце всех итераций, если в цикле не активировался break.

Sample Input:

Sample Output:

840
1860
0
Извините, программа ещё в разработке

'''

class GPS:
    distance1 = ("Москва", "Екатеринбург", 1860)
    distance2 = ("Москва", "Казань", 840)    
    distance3 = ("Москва", "Нижний Новгород", 430)

    # ваш метод
    def count_distance(self, point1, point2):
        self.point1 = point1
        self.point2 = point2
        for i in [self.distance1, self.distance2, self.distance3]:
            if self.point1 == self.point2:
                print(0)
                break
            if self.point1 in i and self.point2 in i:
                print(i[-1])
                break
        else:
            print('Извините, программа ещё в разработке')

# код ниже пожалуйста не удаляйте
dis1 = GPS()
dis2 = GPS()
dis3 = GPS()

dis1.count_distance("Москва", "Казань")
dis2.count_distance("Екатеринбург", "Москва")
dis2.count_distance("Казань", "Казань")
dis3.count_distance("Нижний Новгород", "Екатеринбург")
